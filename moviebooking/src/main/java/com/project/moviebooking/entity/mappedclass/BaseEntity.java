package com.project.moviebooking.entity.mappedclass;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.ColumnDefault;
import org.springframework.security.core.context.SecurityContextHolder;

import com.project.moviebooking.entity.User;
import com.project.moviebooking.entity.inf.AutoGeneratedId;
import com.project.moviebooking.security.model.CustomUserDetail;

import lombok.Data;

/**
*
* @author Rohit
*/
@SuppressWarnings("serial")
@Data
@MappedSuperclass
public class BaseEntity implements AutoGeneratedId {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@JoinColumn(name = "created_by", referencedColumnName = "id")
	@ManyToOne(fetch = FetchType.LAZY)
	private User createdBy;

	@JoinColumn(name = "updated_by", referencedColumnName = "id")
	@ManyToOne(fetch = FetchType.LAZY)
	private User updatedBy;

	@Column(name = "created_on")
	@Temporal(TemporalType.TIMESTAMP)
	private Date createdOn;

	@Column(name = "updated_on")
	@Temporal(TemporalType.TIMESTAMP)
	private Date updatedOn;

	@Column(name = "active")
	@ColumnDefault(value = "0")
	private Boolean active = Boolean.FALSE;

	@ColumnDefault(value = "0")
	@Column(name = "deleted")
	private Boolean deleted = Boolean.FALSE;

	@PrePersist
	public void prePersist() {
		Long id = getCurrentUserId();
		if (id != null) {
			createdBy = new User();
			createdBy.setId(id);
		}

		if (createdOn == null) {
			createdOn = new Date();
		}
	}

	public static Long getCurrentUserId() {
		try {
			CustomUserDetail customUserDetail = (CustomUserDetail) SecurityContextHolder.getContext()
					.getAuthentication().getPrincipal();
			return customUserDetail.getId();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

//	public LocaleEnum getLocaleEnum() {
//		return SecurityUtil.getLocaleEnum();
//	}

	@PreUpdate
	public void preUpdate() {
		Long currentUserId = getCurrentUserId();
		if (currentUserId != null) {
			updatedBy = new User();
			updatedBy.setId(currentUserId);
		}
		updatedOn = new Date();
	}

}
